package views;

import DAO.ShapesDAO;
import com.google.gson.Gson;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;
import java.beans.XMLEncoder;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.PrintWriter;
import java.io.Serializable;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import models.Circle;
import models.Ellipse;
import models.Line;
import models.Point;
import models.Rectangle;
import models.Square;

/**
 *
 * @author juanf
 */
public class MainWindow extends javax.swing.JFrame {

    /**
     * Creates new form MainWindow
     */
    private BufferedImage image;
    ShapesDAO shapes;
    MainPanel panel;
    int x, y, x2, y2;
    Color color_array[];

    public MainWindow(ShapesDAO shapes, BufferedImage image) {
        initComponents();
        this.shapes = shapes;
        this.image = image;
        color_array = new Color[4];
        color_array[0] = Color.green;
        color_array[1] = Color.blue;
        color_array[2] = Color.yellow;
        color_array[3] = Color.red;

    }

    public void setPanel(BufferedImage image, ShapesDAO shapes) {

        if (panel != null) {
            this.remove(panel);
        }

        if (shapes == null) {
            this.shapes = new ShapesDAO();
        }

        panel = new MainPanel(this.shapes, image);
        this.add(panel, BorderLayout.CENTER);
        this.setSize(1200, 900);
        panel.repaint();
        drawOnMouseEvent();

    }

    

    public MainPanel getPanel() {
        return panel;
    }

    private void drawOnMouseEvent() {
        MouseListener listener = new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent arg0) {
            }

            @Override
            public void mousePressed(MouseEvent arg0) {
                x = arg0.getX();
                y = arg0.getY();
            }

            @Override
            public void mouseReleased(MouseEvent arg0) {
                x2 = arg0.getX();
                y2 = arg0.getY();
                if (cshape.getSelectedIndex() == 0) {
                    Circle circle = new Circle((x2 - x) / 2, new Point(x, y), color_array[ccolor.getSelectedIndex()]);
                    shapes.addShape(circle);
                }
                if (cshape.getSelectedIndex() == 1) {
                    Line line = new Line(new Point(x, y), new Point(x2, y2), color_array[ccolor.getSelectedIndex()]);
                    shapes.addShape(line);
                }
                if (cshape.getSelectedIndex()==2)
                {
                    Rectangle rectangle = new Rectangle(x2-x,y2-y,new Point(x2,y2),color_array[ccolor.getSelectedIndex()]);
                    shapes.addShape(rectangle);
                }
                if (cshape.getSelectedIndex()==3)
                {
                    Ellipse ellipse = new Ellipse((x2 - x) / 2,(y2-y)/2, new Point(x, y), color_array[ccolor.getSelectedIndex()]);
                    shapes.addShape(ellipse);
                }
                if (cshape.getSelectedIndex()==4)
                {
                    Square square = new Square((x2 - x),(y2-y), new Point(x, y), color_array[ccolor.getSelectedIndex()]);
                    shapes.addShape(square);
                }
                panel.repaint();
            }

            @Override
            public void mouseEntered(MouseEvent arg0) {
            }

            @Override
            public void mouseExited(MouseEvent arg0) {
            }
        };
        this.panel.addMouseListener(listener);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cshape = new javax.swing.JComboBox<>();
        ccolor = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        cshape.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Circle", "Line", "Rectangle", "Ellipse", "Square" }));

        ccolor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Green", "Blue", "Yellow", "Red" }));

        jButton1.setText("Select image");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Save shapes");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Load shapes");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Reset panel");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(673, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton4)
                    .addComponent(jButton3)
                    .addComponent(jButton2)
                    .addComponent(jButton1)
                    .addComponent(ccolor, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cshape, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(70, 70, 70))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(cshape, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(ccolor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(jButton1)
                .addGap(32, 32, 32)
                .addComponent(jButton2)
                .addGap(18, 18, 18)
                .addComponent(jButton3)
                .addGap(91, 91, 91)
                .addComponent(jButton4)
                .addGap(0, 139, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void serialize() {

        try {
            JFileChooser seleccion = new JFileChooser(); // Se crea la instancia para colocar parametros de interes
            seleccion.setDialogTitle("GUARDAR");    // Titulo de la ventana emergente
            seleccion.setDialogType(JFileChooser.SAVE_DIALOG); // El tipo de JFileChooser que vamos a usar
            seleccion.setFont(new java.awt.Font("Lucida Handwriting", 0, 18)); // (opcional) Cambiando el tipo de letra
            //seleccion.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY); //(opcional) Estableciendo que solo me muestre los directorios. 

            int respuesta = seleccion.showSaveDialog(this); // Se apertura la ventana.
            switch (respuesta) { // segun la opcion del usuario se ejecutan los algoritmos de interes
                case JFileChooser.APPROVE_OPTION:
                    System.out.println("Guardar");
                    Gson gson = new Gson();
                    String jsonString = gson.toJson(shapes);
                    FileWriter fichero = null;
                    PrintWriter pw = null;
                    try {
                        System.out.println(seleccion.getName());
                        fichero = new FileWriter(seleccion.getSelectedFile().getAbsolutePath() + ".json");
                        pw = new PrintWriter(fichero);
                        pw.println(jsonString);

                        File outputfile = new File(seleccion.getSelectedFile().getAbsolutePath() + ".png");
                        ImageIO.write(image, "png", outputfile);

                    } catch (Exception e) {
                        e.printStackTrace();
                    } finally {
                        try {
                            // Nuevamente aprovechamos el finally para 
                            // asegurarnos que se cierra el fichero.
                            if (null != fichero) {
                                fichero.close();
                            }
                        } catch (Exception e2) {
                            e2.printStackTrace();
                        }
                    }
                    System.out.println(jsonString);

                    break;
                case JFileChooser.CANCEL_OPTION:
                    System.out.println("Cancelado");
                    break;
                default:
                    System.out.println("Error");
                    break;
            }

        } catch (Exception e) {
            // TODO: handle exception
            e.printStackTrace();
        }

    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
         // TODO add your handling code here:
        JFileChooser selector = new JFileChooser();
        // selector.setFileFilter(new FiltroJava());
        int estado = selector.showOpenDialog(null);
        File archivoelegido = selector.getSelectedFile();

        if (estado == JFileChooser.APPROVE_OPTION);
        {
            if (archivoelegido != null && archivoelegido.exists()) {
                try {
                    image = ImageIO.read(archivoelegido);
                } catch (IOException ex) {
                    ex.printStackTrace();
                }

                setPanel(image, null);
            }

        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        this.serialize();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        Gson gson = new Gson();

        JFileChooser selector = new JFileChooser();
        // selector.setFileFilter(new FiltroJava());
        int estado = selector.showOpenDialog(null);
        File archivoelegido = selector.getSelectedFile();

        if (estado == JFileChooser.APPROVE_OPTION);
        {
            if (archivoelegido != null && archivoelegido.exists()) {
                FileReader fr;
                try {
                    fr = new FileReader(archivoelegido);
                    BufferedReader br = new BufferedReader(fr);
                    String linea = br.readLine();
                    shapes = gson.fromJson(linea, ShapesDAO.class);

                    String ruta = archivoelegido.getPath();
                    try {
                        image = ImageIO.read(new File(ruta.substring(0, ruta.length() - 4) + "png"));

                        setPanel(image, shapes);
                    } catch (IOException ex) {
                        ex.printStackTrace();
                    }

                } catch (FileNotFoundException ex) {
                    Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            // MainWindow mainwindow = new MainWindow(shapes_, image); // desc
            // mainwindow.setVisible(true);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        setPanel(null, null);
    }//GEN-LAST:event_jButton4ActionPerformed
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //  new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ccolor;
    private javax.swing.JComboBox<String> cshape;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    // End of variables declaration//GEN-END:variables
}
